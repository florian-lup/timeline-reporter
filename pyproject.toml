[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "timeline-reporter"
version = "0.1.0"
description = "AI-powered news automation system"
readme = "README.md"
license = "Proprietary"
authors = ["Florian Lup <contact@florianlup.com>"]
repository = "https://github.com/florian-lup/timeline-reporter"
packages = [
    {include = "clients"},
    {include = "config"},
    {include = "services"},
    {include = "utils"},
]

[tool.poetry.dependencies]
python = "^3.13"
python-dotenv = "^1.1.1"
openai = "^1.93.3"
pymongo = "^4.13.2"
pinecone = "^7.3.0"
httpx = "^0.28.1"
boto3 = "^1.39.10"

[tool.poetry.group.dev.dependencies]
ruff = "^0.12.2"
mypy = "^1.16.1"
pytest = "^8.4.1"
pytest-mock = "^3.14.1"
pytest-cov = "^6.2.1"
responses = "^0.25.7"

[tool.poetry.scripts]
timeline-reporter = "main:main"

[tool.ruff]
# Basic configuration
line-length = 150
target-version = "py313"
fix = true
show-fixes = true
output-format = "grouped"

# File discovery
extend-exclude = [
    "__pycache__",
    ".git",
    ".venv",
    "venv",
    "htmlcov",
    ".pytest_cache",
    "*.egg-info",
]

[tool.ruff.lint]
# Rule selection - comprehensive but practical
select = [
    # Pycodestyle
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    
    # Pyflakes
    "F",   # pyflakes
    
    # Import sorting
    "I",   # isort
    
    # Code quality
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "SIM", # flake8-simplify
    "RET", # flake8-return
    "ARG", # flake8-unused-arguments
    
    # Naming conventions
    "N",   # pep8-naming
    
    # Security
    "S",   # flake8-bandit (security)
    
    # Performance
    "PERF", # perflint
    
    # Error handling
    "B9",  # flake8-bugbear opinionated
    
    # Documentation
    "D",   # pydocstyle
    
    # Complexity
    "PLR", # pylint refactor
    "PLW", # pylint warning
    "PLE", # pylint error
    
    # Modern Python features
    "PTH", # flake8-use-pathlib
    "FBT", # flake8-boolean-trap
    
    # Debugging
    "T20", # flake8-print
    
    # Type checking
    "TC", # flake8-type-checking
]

# Ignore specific rules with justification
ignore = [
    # Assertions and debugging
    "S101",    # Use of assert detected (legitimate in tests and debug code)
    "T201",    # print statements (useful for debugging and logging)
    
    # Function arguments
    "B008",    # Do not perform function calls in argument defaults
    "FBT001",  # Boolean positional arg in function definition
    "FBT002",  # Boolean default arg in function definition
    
    # Security exceptions for this project
    "S311",    # Standard pseudo-random generators (acceptable for this project)
    "S603",    # subprocess call (needed for our lint script)
    "S607",    # Starting a process with a partial executable path
    
    # Documentation (can be strict, adjust as needed)
    "D100",    # Missing docstring in public module
    # "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    # "D103",    # Missing docstring in public function
    "D104",    # Missing docstring in public package
    "D105",    # Missing docstring in magic method
    
    # Complexity (adjust thresholds as needed)
    "PLR0913", # Too many arguments to function call
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    
    # Type checking (can be noisy in some contexts)
    "TC001",  # Move import into type-checking block
    "TC002",  # Move import into type-checking block
    "TC003",  # Move import into type-checking block
]

# Specific ignores per file type
[tool.ruff.lint.per-file-ignores]
# Test files - more lenient
"tests/**/*.py" = [
    "T201",    # print statements
    "S101",    # assert statements
    "ARG",     # unused arguments
    "PLR2004", # magic values
    "S105",    # hardcoded passwords (test data)
    "S106",    # hardcoded passwords (test data)
    "D",       # documentation not required
]
"test_*.py" = [
    "T201", "S101", "ARG", "PLR2004", "S105", "S106", "D"
]

# Configuration files
"conftest.py" = ["D"]
"**/conftest.py" = ["D"]

# Scripts and utilities
"lint.py" = ["T201", "S603", "S607"]
"test_all.py" = ["T201"]

[tool.ruff.lint.isort]
# Import organization
known-first-party = ["clients", "config", "services", "utils"]
section-order = [
    "future",
    "standard-library", 
    "third-party",
    "first-party",
    "local-folder"
]
combine-as-imports = true
split-on-trailing-comma = true
force-wrap-aliases = true

[tool.ruff.lint.pydocstyle]
# Documentation style
convention = "google"

[tool.ruff.lint.pylint]
# Complexity thresholds
max-args = 8
max-branches = 15
max-returns = 8
max-statements = 60

[tool.ruff.format]
# Formatting (Ruff's Black-compatible formatter)
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# Format code blocks in docstrings
docstring-code-format = true
docstring-code-line-length = 60



[tool.mypy]
# Python version and basic settings
python_version = "3.13"
show_error_codes = true
show_column_numbers = true
pretty = true

# Import discovery
namespace_packages = true
explicit_package_bases = true

# Untyped definitions
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true

# Optional handling
no_implicit_optional = true
strict_optional = true

# Warnings
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

# Error reporting
show_error_context = true
color_output = true

# Miscellaneous strictness
strict_equality = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true

# Ignore missing imports for third-party libraries without stubs
[[tool.mypy.overrides]]
module = [
    "pymongo.*",
    "pinecone.*",
    "openai.*",
    "responses.*",
    "boto3.*",
    "botocore.*",
    "requests.*",
]
ignore_missing_imports = true

# Less strict for test files
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_calls = false